<?xml version='1.0' encoding='ISO-8859-1'?>
<!--
NOTE: This web.xml file was generated by the Coherence*Web installer and must
not be modified. If you need to make changes to the web application
configuration, uninstall Coherence*Web from the web application, modify the
original web application web.xml file, reinspect the web application, and
then reinstall Coherence*Web.
-->
<web-app xmlns='http://java.sun.com/xml/ns/javaee' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xsi:schemaLocation='http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd' version='2.5'>
  <display-name>web</display-name>
  <description>web</description>
  <context-param>
    <description>The fully qualified class name of the SessionHelper Factory
      to use. Defaults to "com.tangosol.coherence.servlet.apiXX.DefaultFactory"
      where "XX" is "23", "24" or "25" for Servlet 2.3, 2.4 and 2.5 containers
      respectively.</description>
    <param-name>coherence-factory-class</param-name>
    <param-value/>
  </context-param>
  <context-param>
    <description>The fully qualified class name of the HttpSessionCollection
      implementation to use. Possible values include
      "com.tangosol.coherence.servlet.MonolithicHttpSessionCollection",
      "com.tangosol.coherence.servlet.SplitHttpSessionCollection", or
      "com.tangosol.coherence.servlet.TraditionalHttpSessionCollection".</description>
    <param-name>coherence-sessioncollection-class</param-name>
    <param-value>com.tangosol.coherence.servlet.MonolithicHttpSessionCollection</param-value>
  </context-param>
  <context-param>
    <description>Either "true" or "false" to indicate whether the cluster
      software is deployed as part of the application and thus must be shut
      down fully by the application when it shuts down. For example, this
      should be set to "true" if coherence.jar is deployed within the
      application "WAR" file. Defaults to "false".</description>
    <param-name>coherence-cluster-owned</param-name>
    <param-value>true</param-value>
  </context-param>
  <context-param>
    <description>Either "true" or "false" to indicate whether the attributes
      of the ServletContext will be clustered. If "true", then all
      serializable ServletContext attribute values will be shared among
      all cluster nodes. The default is "false", primarily because the Servlet
      specification indicates that the ServletContext attributes are local
      to a JVM and should not be clustered.</description>
    <param-name>coherence-servletcontext-clustered</param-name>
    <param-value/>
  </context-param>
  <context-param>
    <description>The name of the Coherence cache that will be used to hold the
      servlet context data if the servlet context is clustered. Defaults to
      "servletcontext-storage".</description>
    <param-name>coherence-servletcontext-cachename</param-name>
    <param-value/>
  </context-param>
  <context-param>
    <description>The comma-delimited list of names of application classes that
      wish to receive events from the web container. (Servlet 2.3 and later.)
      This list comes from the application listeners declared in the web.xml
      "listener" elements.</description>
    <param-name>coherence-eventlisteners</param-name>
    <param-value/>
  </context-param>
  <context-param>
    <description>"true" to allow the application to iterate sessions from the
      session context, thus disobeying the deprecation in the servlet spec.
      Defaults to "false".</description>
    <param-name>coherence-enable-sessioncontext</param-name>
    <param-value/>
  </context-param>
  <context-param>
    <description>The number of milliseconds that a server will hold a lock on
      a session while accessing that session without the session being implied
      by the current request context. A session is implied by the current
      request context if and only if the current thread is processing a Serlvet
      request, and the request is associated with that session. All other
      access to a session object is "out of context", for example if a
      reference to an arbitrary session is obtained from a SessionContext
      object (if that option is enabled), or if the application has code
      that holds on to session object references to manage sessions directly.
      Since session access requires session ownership, "out of context"
      access to the session object will automatically obtain ownership on
      behalf of the caller; that ownership will be retained for the number
      of milliseconds specified by this option so that repeated calls to the
      session do not individually obtain and release ownership, which is
      potentially an expensive operation. The legal range is 10 to 10000
      (from 1/100th of a second up to 10 seconds). Defaults to 200.</description>
    <param-name>coherence-contextless-session-retain-millis</param-name>
    <param-value/>
  </context-param>
  <context-param>
    <description>"true" to enable session cookies. Defaults to "true".</description>
    <param-name>coherence-session-cookies-enabled</param-name>
    <param-value/>
  </context-param>
  <context-param>
    <description>The name of the session cookie. Defaults to "JSESSIONID".</description>
    <param-name>coherence-session-cookie-name</param-name>
    <param-value/>
  </context-param>
  <context-param>
    <description>The domain of the session cookie as defined by RFC 2109.
      By default, no domain is set explicitly by the session management
      implementation.</description>
    <param-name>coherence-session-cookie-domain</param-name>
    <param-value/>
  </context-param>
  <context-param>
    <description>The path of the session cookie as defined by RFC 2109.
      By default, no path is set explicitly by the session management
      implementation.</description>
    <param-name>coherence-session-cookie-path</param-name>
    <param-value/>
  </context-param>
  <context-param>
    <description>The maximum age in seconds of the session cookie as
      defined by RFC 2109. A value of -1 indicates that the cookie
      will not be persistent on the client; a positive value gives
      the maximum age that the cookie will be persisted by the client.
      Zero is not permitted. Defaults to -1.</description>
    <param-name>coherence-session-cookie-max-age</param-name>
    <param-value/>
  </context-param>
  <context-param>
    <description>"true" to enable URL encoding of session IDs. Defaults to
      "false".</description>
    <param-name>coherence-session-urlencode-enabled</param-name>
    <param-value/>
  </context-param>
  <context-param>
    <description>The parameter name to encode the session ID into the URL
      with. On some containers, this value cannot be overriden. Defaults to
      "jsessionid".</description>
    <param-name>coherence-session-urlencode-name</param-name>
    <param-value/>
  </context-param>
  <context-param>
    <description>"true" to use the container's decoding of the URL session ID.
      If "coherence-session-urlencode-name" has been overridden, this must be
      set to "false". Setting this to "false" will not work in some containers.
      Defaults to "true".</description>
    <param-name>coherence-session-urldecode-bycontainer</param-name>
    <param-value/>
  </context-param>
  <context-param>
    <description>"true" to use the container's encoding of the URL session ID.
      Setting this to "true" may conflict with the setting for
      "coherence-session-urlencode-name" if it has been specified. Defaults
      to "false".</description>
    <param-name>coherence-session-urlencode-bycontainer</param-name>
    <param-value/>
  </context-param>
  <context-param>
    <description>"true" to coordinate reaping in the cluster such that only one
      server will perform reaping within a given reaping cycle, and it will
      be responsible for checking all of the sessions that are being managed
      in the cluster. Defaults to "false".</description>
    <param-name>coherence-reaperdaemon-cluster-coordinated</param-name>
    <param-value/>
  </context-param>
  <context-param>
    <description>The number of times that the reaper reaps the sessions that
      are being used locally before it will check sessions that may be
      orphaned or expired elsewhere in the cluster. This setting is only used
      when coordinate reaping is disabled. Setting it to 1 for example will
      cause the daemon to check this server's fair share of the session IDs
      in the cluster every time that it wakes up to check for expired
      sessions (for example every 60 seconds). Setting it to ten will
      cause those sessions to be checked every 600 seconds instead, but the
      sessions that are being used on this server will still be checked every
      60 seconds. Defaults to 4.</description>
    <param-name>coherence-reaperdaemon-sweep-modulo</param-name>
    <param-value>4</param-value>
  </context-param>
  <context-param>
    <description>This setting allows the reaper to assume that the sessions
      that are stored on this node (for example, by a distributed cache
      service) are the only sessions that this node needs to check for
      expiry. This value must be set to "false" if the session storage cache
      is being managed by nodes that are not running a reaper, for example
      if cache servers are being used to manage the session storage cache.
      (It is suggested that if cache servers are being used, that the
      "split" model be selected, and that the session overflow storage be
      run in a separate distributed cache service that is managed entirely
      by the cache servers, while the session storage cache itself remain
      in a distributed cache service that is managed entirely by the
      application server JVMs in order to be able to take advantage of this
      "assume locality" feature.) Defaults to "true".</description>
    <param-name>coherence-reaperdaemon-assume-locality</param-name>
    <param-value>false</param-value>
  </context-param>
  <context-param>
    <description>The number of seconds that the daemon rests between reaping.
      For production clusters with long session timeouts, this can safely be
      set higher. For testing, particularly with short session timeouts, it
      can be set much lower. Setting it too low can cause more network traffic
      and use more processing cycles, and only has benefit if the application
      requires the sessions to be invalidated quickly once they have expired.
      Defaults to 300.</description>
    <param-name>coherence-reaperdaemon-cycle-seconds</param-name>
    <param-value>15</param-value>
  </context-param>
  <context-param>
    <description>The priority for the session reaper daemon.
      For more information, see the source for the "java.lang.Thread" class.
      Defaults to 5.</description>
    <param-name>coherence-reaperdaemon-priority</param-name>
    <param-value/>
  </context-param>
  <context-param>
    <description>This name overrides the name of the clustered cache that
      stores the sessions. Defaults to "session-storage".</description>
    <param-name>coherence-session-cachename</param-name>
    <param-value/>
  </context-param>
  <context-param>
    <description>This name overrides the name of the clustered cache that
      stores the IDs of "recently departed" sessions. Defaults to
      "session-death-certificates".</description>
    <param-name>coherence-session-deathcert-cachename</param-name>
    <param-value/>
  </context-param>
  <context-param>
    <description>This name overrides the name of the clustered cache that
      stores the management and configuration information for the session
      management implementation. Generally, it should be configured a
      replicated cache. Defaults to "session-management".</description>
    <param-name>coherence-session-management-cachename</param-name>
    <param-value/>
  </context-param>
  <context-param>
    <description>This value overrides the session expiry time, and is
      expressed in seconds. Setting it to -1 will cause sessions to
      never expire. Defaults to 1800.</description>
    <param-name>coherence-session-expire-seconds</param-name>
    <param-value>1800</param-value>
  </context-param>
  <context-param>
    <description>This is the length, in characters, of generated session IDs.
      The suggested absolute minimum length is 8. Defaults to 12.</description>
    <param-name>coherence-session-id-length</param-name>
    <param-value/>
  </context-param>
  <context-param>
    <description>This value determines how long the session management
      implementation waits before shutting down after receiving the last
      indication that the application has been stopped, either from
      ServletContextListener events (Servlet 2.3 or later) or by the
      destruction of Servlet and Filter objects. This value is expressed
      in seconds. A value of zero indicates synchronous shut-down; any
      positive value indicates asynchronous shut-down. The default is 0,
      because some servers are not capable of asynchronous shut-down.</description>
    <param-name>coherence-shutdown-delay-seconds</param-name>
    <param-value/>
  </context-param>
  <context-param>
    <description>This value, if set to "true", will prevent two threads in
      different JVMs from processing a request for the same session at the
      same time. A value of "false" is incompatible with sticky session
      optimizations, application and thread locking. Defaults to "false".</description>
    <param-name>coherence-session-member-locking</param-name>
    <param-value/>
  </context-param>
  <context-param>
    <description>This value, if set to "true", will prevent two threads in
      different applications from processing a request for the same session
      at the same time. A value of "false" is incompatible with thread locking.
      If set to "true" the value of the "coherence-session-member-locking"
      parameter will be ignored, as application locking implies member locking.
      Defaults to "false".</description>
    <param-name>coherence-session-app-locking</param-name>
    <param-value/>
  </context-param>
  <context-param>
    <description>This value, if set to "true", will prevent two threads in the
      same JVM from processing a request for the same session at the same time.
      If set to "true" the value of the "coherence-session-member-locking" and
      "coherence-session-app-locking" parameters will be ignored, as thread
      locking implies both member and application locking. Defaults to "false".</description>
    <param-name>coherence-session-thread-locking</param-name>
    <param-value/>
  </context-param>
  <context-param>
    <description>This value, if set to "true", will indicate that the
      implementation will strictly adhere to the Servlet specification;
      setting it to "false" will allow the implementation to ignore certain
      types of exceptions, instead of shutting down the application. Defaults
      to "true".</description>
    <param-name>coherence-session-strict-spec</param-name>
    <param-value/>
  </context-param>
  <context-param>
    <description>This value, if set to "true", specifies whether sticky
      sessions optimizations will be used. This should only be turned on if a
      sticky load balancer is being used. This feature requires
      Coherence Enterprise edition license. Defaults to "false".</description>
    <param-name>coherence-sticky-sessions</param-name>
    <param-value/>
  </context-param>
  <context-param>
    <description>This value specifies a class name of the optional
      com.tangosol.coherence.servlet.HttpSessionCollection.SessionDistributionController
      interface implementation to use. This feature requires
      "coherence-sticky-sessions" optimization be turned on.</description>
    <param-name>coherence-distributioncontroller-class</param-name>
    <param-value/>
  </context-param>
  <context-param>
    <description>This value specifies a class name of the optional
      com.tangosol.coherence.servlet.HttpSessionCollection.AttributeScopeController
      interface implementation to use.</description>
    <param-name>coherence-scopecontroller-class</param-name>
    <param-value>com.tangosol.coherence.servlet.AbstractHttpSessionCollection$ApplicationScopeController</param-value>
  </context-param>
  <context-param>
    <description>This value, if set to "true", specifies whether non-serializable
      attributes should be preserved as local ones. This feature requires
      "coherence-sticky-sessions" optimization be turned on. Defaults to
      "false".</description>
    <param-name>coherence-preserve-attributes</param-name>
    <param-value/>
  </context-param>
  <context-param>
    <description>This name overrides the name of the local cache that
      stores non-distributed sessions when
      "coherence-distributioncontroller-class" parameter is specified.
      Defaults to "local-session-storage".</description>
    <param-name>coherence-local-session-cachename</param-name>
    <param-value/>
  </context-param>
  <context-param>
    <description>This name overrides the name of the local cache
      that stores non-distributed sessions when either
      "coherence-sessiondistributioncontroller-class" parameter is
      specified or "coherence-preserve-attributes" parameter is "true".
      Defaults to "local-attribute-storage".</description>
    <param-name>coherence-local-attribute-cachename</param-name>
    <param-value/>
  </context-param>
  <context-param>
    <description>For the split model, this value overrides the name of the
      clustered cache that stores the "large attributes" that exceed a
      certain size and thus are determined to be more efficiently managed
      as separate cache entries and not as part of the serialized session
      object itself. Defaults to "session-overflow".</description>
    <param-name>coherence-session-overflow-cachename</param-name>
    <param-value/>
  </context-param>
  <context-param>
    <description>For the split model, this value specifies the minimum length
      (in bytes) that the serialized form of an attribute value must be in
      order for that attribute value to be stored in the separate "overflow"
      cache that is reserved for large attributes. Defaults to 1024.</description>
    <param-name>coherence-attribute-overflow-threshold</param-name>
    <param-value/>
  </context-param>
  <context-param>
    <description>Session expiry filter that excludes sessions not managed
      by this site; Required by Coherence*Web push replication</description>
    <param-name>coherence-session-expiry-filter-factory-class</param-name>
    <param-value>com.oracle.coherence.patterns.pushreplication.web.SiteSessionExpiryFilterFactory</param-value>
  </context-param>
  <context-param>
      <param-name>coherence-session-enable-debug-logging</param-name>
      <param-value>true</param-value>
  </context-param>
  <listener>
    <listener-class>com.tangosol.coherence.servlet.api23.ServletContextListenerImpl</listener-class>
  </listener>
  <welcome-file-list>
    <welcome-file>session-access.jsp</welcome-file>
  </welcome-file-list>
</web-app>
